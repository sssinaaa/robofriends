{"version":3,"sources":["components/SearchBox.js","components/ErrorBoundary.js","components/CardList.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["SearchBox","searchChange","className","type","placeholder","onChange","ErrorBoundary","props","state","hassError","error","info","this","setState","children","Component","CardList","robots","Error","Scroll","style","overflowY","border","height","App","onSearchChange","event","searchfield","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","name","toLowerCase","includes","length","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2OAeeA,EAbG,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACnB,OACE,yBAAKC,UAAU,OACb,2BACEA,UAAU,mCACVC,KAAK,SACLC,YAAY,gBACZC,SAAYJ,MCaLK,E,YAnBb,WAAYC,GAAO,IAAD,8BAChB,4CAAMA,KACDC,MAAQ,CACXC,WAAW,GAHG,E,+EAOAC,EAAOC,GACvBC,KAAKC,SAAS,CAAEJ,WAAW,M,+BAI3B,OAAIG,KAAKJ,MAAMC,UACN,wDAEFG,KAAKL,MAAMO,a,GAhBMC,aCyBbC,EAvBE,SAAC,GAAe,EAAbC,OAEhB,MAAM,IAAIC,MAAM,aCILC,EARA,SAACZ,GACd,OACE,yBAAKa,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UAClEhB,EAAMO,WC+CEU,G,kBA1Cb,aAAc,IAAD,8BACX,+CAaFC,eAAiB,SAAAC,GACf,EAAKb,SAAS,CAAEc,YAAaD,EAAME,OAAOC,SAb1C,EAAKrB,MAAQ,CACXS,OAAQ,GACRU,YAAa,IAJJ,E,iFAQO,IAAD,OACjBG,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAU,EAAKrB,SAAS,CAAEI,OAAQiB,S,+BAQjC,IAAD,EAC0BtB,KAAKJ,MAA7BS,EADF,EACEA,OAAQU,EADV,EACUA,YACVQ,EAAiBlB,EAAOmB,QAAO,SAAAC,GACnC,OAAOA,EAAMC,KAAKC,cAAcC,SAASb,EAAYY,kBAGrD,OAAQtB,EAAOwB,OAGb,yBAAKvC,UAAU,MACb,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWD,aAAcW,KAAKa,iBAC9B,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUR,OAAQkB,OAPxB,2C,GA3BUO,IAAM3B,YCGJ4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,MAAK,SAAAwB,GACjCA,EAAaC,iB","file":"static/js/main.5f3e76d0.chunk.js","sourcesContent":["import React from 'react';\n\nconst SearchBox = ({ searchChange }) => {\n  return (\n    <div className='pa2'>\n      <input\n        className='pa3 ba b--green bg-lightest-blue'\n        type='search'\n        placeholder=\"search robots\"\n        onChange = {searchChange}\n      />\n    </div>\n  );\n}\n\nexport default SearchBox;\n","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      hassError: false\n    }\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({ hassError: true })\n  }\n\n  render() {\n    if (this.state.hassError) {\n      return <h1>Oooops. That is not good</h1>\n    }\n    return this.props.children\n  }\n}\n\nexport default ErrorBoundary;\n","import React from 'react';\nimport Card from './Card';\n\n\nconst CardList = ({ robots }) => {\n  if (true){\n    throw new Error('NOooooo!')\n  }\n  return (\n    <div>\n      {\n        robots.map((user, i) => {\n          return (\n            <Card\n            key= {i}\n            id={robots[i].id}\n            name={robots[i].name}\n            email={robots[i].email}\n            />\n          );\n        })\n      }\n    </div>\n  );\n}\n\n\nexport default CardList\n","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div style={{overflowY: 'scroll' ,border: '5px solid black', height: '500px'}}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;\n","import React from 'react';\nimport SearchBox from '../components/SearchBox';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport CardList from '../components/CardList';\nimport Scroll from '../components/Scroll'\nimport './App.css';\n\n// STATE >> PROPS\n// LifeCycle ---> (1 - constructor <----> 2 - render), componentDidMount(once),\nclass App extends React.Component {\n  constructor(){\n    super()\n    this.state = {\n      robots: [],\n      searchfield: ''\n    }\n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => {this.setState({ robots: users })});\n  }\n\n  onSearchChange = event => {\n    this.setState({ searchfield: event.target.value })\n  }\n\n  // render X set.state\n  render(){\n    const { robots, searchfield } = this.state;\n    const filteredRobots = robots.filter(robot =>{\n      return robot.name.toLowerCase().includes(searchfield.toLowerCase());\n      })\n\n      return !robots.length ?\n        <h1>Loading</h1> :\n       (\n        <div className='tc'>\n          <h1 className=\"f1\">RoboFriends</h1>\n          <SearchBox searchChange={this.onSearchChange} />\n          <Scroll>\n            <ErrorBoundary>\n              <CardList robots={filteredRobots}/>\n            </ErrorBoundary>\n          </Scroll>\n        </div>\n      );\n    }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}